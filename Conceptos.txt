Conceptos importantes

- Node: Node.js es un entorno de ejecución de JavaScript, que le permite al código en js ser ejecutado en nuestra computadora.
Podemos darle a node un archivo de js y éste puede ejecutarlo, y darle acceso a recursos de nuestra computadora (IO, Network, Etc).
Url de descarga: https://nodejs.org/en  (Descargar e instalar la versión LTS).
Comando de consola para verificar la instalación: node -v 

- Npm: Cuando usamos Node.js, rápidamente tenemos que instalar módulos nuevos (librerías), ya que al ser un sistema fuertemente 
modular viene prácticamente “vacío”. Por lo tanto, para utilizar una funcionalidad de alguna librería publicada, 
deberemos instalar módulos adicionales. Esta operación se realiza de forma muy sencilla con la herramienta npm 
(Node Package Manager).

- React: es una librería de JavaScript desarrollada por Facebook que es ampliamente utilizada para crear SPAs y aplicaciones web
de una sola página. React se enfoca en la creación de interfaces de usuario (UI) interactivas y reactivas.
Url documentación en español: https://es.react.dev/

-Componentes: React se basa en un enfoque de desarrollo basado en componentes. Los componentes son bloques de código 
reutilizables que representan partes de la interfaz de usuario. Puedes componer aplicaciones completas dividiéndolas 
en componentes más pequeños.

- SPA: Una SPA (Single Page Application) es un tipo de aplicación web que carga una sola página HTML inicial y, en lugar de cargar 
páginas web completas cada vez que un usuario navega a diferentes secciones, utiliza técnicas de JavaScript para cambiar 
dinámicamente el contenido de esa página única. Esto proporciona una experiencia de usuario más fluida y rápida, 
ya que no es necesario recargar toda la página.

- Virtual DOM: React utiliza un concepto llamado Virtual DOM para mejorar el rendimiento. En lugar de actualizar 
directamente el DOM del navegador cada vez que cambia el estado de la aplicación, React crea una representación 
virtual del DOM y compara los cambios entre la representación virtual y el DOM real para actualizar solo las partes que han cambiado. 
Esto reduce la carga en el navegador y mejora la velocidad de la aplicación.

- Vite: es una herramienta de compilación que tiene como objetivo proporcionar una experiencia de desarrollo más rápida 
y ágil para proyectos web modernos. 
Es un entorno de desarrollo web moderno que se utiliza para crear aplicaciones web y proyectos de JavaScript. 
Vite se ha vuelto popular en la comunidad de desarrollo web debido a su velocidad y eficiencia en la construcción y desarrollo de aplicaciones.
Url: https://vitejs.dev/
Comando de consola para la creación de un proyecto: npm create vite@latest

- Sugar Syntax: Sugar Syntax refiere a la sintaxis agregada a un lenguaje de programación con el objetivo de hacer 
más fácil y eficiente su utilización. Favorece su escritura, lectura y comprensión. Ej: Operadores ternarios

- Polyfills: Los polyfills nos permiten hacer nuestra aplicación compatible con navegadores antiguos, 
que no admiten de forma nativa alguna nueva funcionalidad.

- Empaquetador: Es una herramienta de construcción (build tool) ampliamente utilizada en el desarrollo web y 
de aplicaciones. Su función principal es tomar diversos archivos fuente, como archivos JavaScript, CSS, imágenes 
y otros recursos, luego los compila en un solo archivo (o varios) optimizados de manera eficiente que pueda ser utilizado 
por un navegador web. Esto es particularmente útil en aplicaciones web modernas, donde el código fuente 
tiende a estar dividido en múltiples archivos para facilitar el desarrollo y el mantenimiento.
Algunos empaquetadores conocidos son Webpack y el que usamos nosotros Rollup con vite.

- Transpiling: Es el proceso de convertir código escrito en un lenguaje, a su representación en otro lenguaje, por ejemplo pasar de Typescript a JavaScript. 
Usualmente extienden o simplifican la escritura del lenguaje, o representación original. Por ejemplo nosotros
escribimos código de Sass y luego se los transpila a código de css. 

- JSX: Es una extensión de sintaxis de Javascript que se parece a HTML. En React escribimos el código en JSX 
como si fuese un HTML pero al momento de la momento de renderizar en el DOM se transpila a código de JavaScript para que
pueda ser interpretado por el navegador.
Url ref: https://es.react.dev/learn/writing-markup-with-jsx


- Componente: Es un conjunto de elementos que cumplen una función específica en la interfaz de usuario.
Se utilizan para construir la jerarquía de todos esos elementos. Cada componente puede contener otros 
componentes como hijos.
Los componentes tienen 3 características fundamentales:
1 - Renderizar un solo elemento: una solución es usar los fragments <> </> 
2 - Pueden recibir propiedades.
3 - Pueden tener un estado.

- Props: Las props en React se utilizan para pasar datos de un componente padre a un componente hijo, 
manteniendo el flujo unidireccional de los datos. 
Las props son objetos que contienen datos específicos que un componente necesita para renderizarse correctamente. 
Esto permite la reutilización de componentes en diferentes partes de la aplicación con diferentes datos.

- Estado: Los estados de un componente en React se utilizan para representar la información que puede cambiar 
durante la vida útil del componente y afectar su representación en la interfaz de usuario.
Todo cambio de estado va inicializar el proceso de render a partir del nodo donde se produjo el cambio de 
estado y así se generará el nuevo Virtual DOM que luego será reconciliado. 
Los estados son un concepto de React, no de JavaScrip, para implementarlos vamos a utilizar los hooks.

- Hook: Los hooks son funciones que se pueden usar dentro de los componentes funcionales para agregar 
funcionalidad adicional de React. 
Son varias las funcionalidades, pero una de ellas son los estados, con el hook useState.
Características: 
* Comienzan con el prefijo “use” para que React pueda identificarlos y realizar validaciones. 
* Solamente pueden utilizarse dentro de componentes funcionales.
* Deben ejecutarse siempre, es decir, en cada renderizado y el orden de ejecución debe ser siempre el mismo.
 No puede estar dentro de if, for, etc.
* Deben ejecutarse siempre en el cuerpo de la función del componente, por lo que normalmente se los ejecuta al inicio.

- useState: useState es un hook de React que permite a los componentes funcionales tener estado.
https://es.react.dev/reference/react/useState